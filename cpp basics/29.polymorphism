C++ Polymorphism

The term "Polymorphism" is the combination of "poly" + "morphs" which means many forms. It is a greek word. In object-oriented programming, we use 3 main concepts: inheritance, encapsulation, and polymorphism.

Real Life Example Of Polymorphism

Let's consider a real-life example of polymorphism. A lady behaves like a teacher in a classroom, mother or daughter in a home and customer in a market. Here, a single person is behaving differently according to the situations.

There are two types of polymorphism in C++:

Compile time polymorphism: 

The overloaded functions are invoked by matching the type and number of arguments. This information is available at the compile time and, therefore, compiler selects the appropriate function at the compile time. It is achieved by function overloading and operator overloading which is also known as static binding or early binding. Now, let's consider the case where function name and prototype is same.

types of compile time polymorphism :
1. function overloading
2. operator overloading
   

Run time polymorphism: 

Run time polymorphism is achieved when the object's method is invoked at the run time instead of compile time. It is achieved by method overriding which is also known as dynamic binding or late binding.

type of run time overloading
1. virutal function



               Compile time polymorphism	                              |              Run time polymorphism
                                                                          |
The function to be invoked is known at the compile time.	              |   The function to be invoked is known at the run time.
It is also known as overloading, early binding and static binding.	      |   It is also known as overriding, Dynamic binding and late binding.
Overloading is a compile time polymorphism.  	                          |   Overriding is a run time polymorphism 
It is achieved by function overloading and operator overloading.	      |    It is achieved by virtual functions and pointers.
It provides fast execution as it is known at the compile time.	          |   It provides slow execution as it is known at the run time.
It is less flexible as mainly all the things execute at the compile time. |	 It is more flexible as all the things execute at the run time.